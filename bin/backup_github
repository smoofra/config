#!/usr/bin/python

import sys
import argparse
import urllib2
import json
import subprocess
import os.path

parser = argparse.ArgumentParser()
parser.add_argument("--verbose", "-v", action='store_true')
parser.add_argument("user")
parser.add_argument("--chdir", "-C")
args = parser.parse_args()

if args.chdir:
    os.chdir(args.chdir)

quiet_flags = [] if args.verbose else ["--quiet"]

repos = json.load(urllib2.urlopen('https://api.github.com/users/%s/repos' % args.user))

def is_bare_repo(filename):
    return os.path.isdir(filename) and all(
        os.path.exists(os.path.join(filename, x)) for x in
        ['info', 'refs', 'objects', 'HEAD', 'config'])


for repo in repos:
    name = repo["name"]
    url = repo["clone_url"]
    filename = name + ".git"

    if os.path.exists(filename):

        if not is_bare_repo(filename):
            raise Exception, "%s exists but is not a bare git repo" + filename


        proc = subprocess.Popen(["git", "config", "remote.origin.url"],
                                cwd=filename,
                                stdout=subprocess.PIPE)
        check_url = proc.stdout.read().strip()
        if proc.wait() != 0:
            raise Exception, "git config failed!"

        if check_url != url:
            raise Exception, "Url for repo %s changed from %s to %s" % (name, check_url, url)

        proc = subprocess.Popen(["git", "fetch", "origin"] + quiet_flags,
                                cwd=filename)
        if proc.wait() != 0:
            raise Exception, "git fetch failed for: " + name

    else:

        proc = subprocess.Popen(["git", "clone", "--bare", "--mirror"] + quiet_flags + [url, filename])
        if proc.wait() != 0:
            raise Exception, "git clone failed for: " + url
