#!/usr/bin/env python3

import csv
import sys
import re
from collections import defaultdict, OrderedDict
from datetime import datetime
import os
from typing import Dict
import argparse

cats = OrderedDict([
    ('groceries', [
        "wegmans",
        "weis",
        "supercenter",
        "food maxx",
        "va abc",
        "martins",
        "target",
        "south mountain",
        "trade coffee",
        "weiss",
        "giant martins",
        "target",
        "spice house",
        "safeway",
        "wholefds",
        "trader.*joe",
        "delucchi",
        "sprouts farmers",
        "99 ranch",
        "rancho gordo",
        "HEATONIST",
        "coco food",
        "nalls farm",
        "shiraz market",
        "harris teeter",
        "wal-mart",
        "moink",
        "costco",
        "aldi",

    ]),
    ("bike", ["EVOLUTION BIKE SHOP"]),
    ("it", ["no-ip", "crashplan", "linode", "winchester wireless", "Akamai", "VZWRLSS", "starlink", "kolab"]),
    ("electronics", ["fry's", "adafruit", "digi key"]),
    ("travel", [
        "HUDSONNEWS",
        "usair",
        "clipper service",
        "caltrain",
        "amtrak",
        "hudson news",
        "fastrack",
        "short stop news",
        "uber",
        "lyft",
        "bird app",
        "virgin amer",
        "american air",
    ]),
    ("hotels", ["AIRBNB", "hilton", "holiday inn", "restful nest", "HOTELTONIGHT", "best western"]),
    ("pets", ["petsmart"]),
    ("house", ["ASHLEY INTERIORS", "ikea", "home.*depot", "regan nursery", "lowes", "fh furr",
        "HOME PARAMOUNT", "ENVIROAIRE", "SPICHERS", "build.com", "wall control",
    ]),
    ("restaurants", [
        "rams head",
        "brobear",
        "WILLIE SUTTONS SALOON",
        "water street kitchen",
        "bonnie blue",
        "pho",
        "bojangles",
        "NEIGHBORHOOD ITALIAN",
        "mobydick",
        "bakeries",
        "teytas treats",
        "main cup",
        "kung fu tea",
        "WETZELS PRETZELS",
        "SANTORINI GRILL",
        "silver din",
        "ale works",
        "pho bar",
        "glory days grill",
        "POLLON RANSON",
        "TJ's PIT STOP",
        "RESTON BIG BUNS",
        "waffle house",
        "el ranchero",
        "mission bbq",
        "insomnia cookies",
        "mcdonald's",
        "wendys",
        "dunkin",
        "hometown noodle",
        "original mel",
        "doordash",
        "happy lemon",
        "ok noodle",
        "krispy kreme",
        "the kebab shop",
        "smoking pig",
        "sushi",
        "STIR IT UP EMERALD IS",
        "chick-fil-a",
        "jaleo",
        "fuzzy peach",
        "chopsticks pho",
        "ihop",
        "news and gifts dul",
        "red robin",
        "CHEVYS",
        "wine",
        "YELLOW FARMHOUSE",
        "brewing",
        "5guys",
        "icebox",
        "in n out",
        "KYUSU",
        "the wharf market",
        "saffron",
        "adobolicious",
        "MSC CNCRS GOLDN GATE PARK",
        "trinidad bay eater",
        "famous daves",
        "ice cream",
        "cloud bistro",
        "tutti frutti",
        "kona ice",
        "ramen",
        "bagel",
        "taque",
        "101.*fish",
        "baking",
        "einstein bros",
        "rubios",
        "yogurt",
        "u-haul",
        "bakery",
        "liquor",
        "chaya",
        "chipotle",
        "super burrito",
        "le boulan",
        "diner",
        "frozos",
        "restaur",
        "yogolicious",
        "coffee",
        "the melt",
        "COFFEETOPIA",
        "GUAVA & JAVA SFO INC",
        "oyamel",
        "la madeleine",
        "victoria",
        "silver diner",
        "farmers mark",
        "noodles",
        "cafe",
        "caffe",
        "pizza",
        "starbucks",
        "falafel",
        "panera",
        "go *chi",
        "chowder",
        "grubhub",
        "restaurant",
        "in-n-out",
        "roadhouse",
        "philz",
        "five.*guys",
        "yosemite.*treats",
        "pho.*minh",
        "grain d'or",
        "aqui willow glen",
        "high.*country",
        "smokehouse",
        "baguette",
        "mandarin gourmet",
        "poki run",
        "THE BRANDING IRON",
        "homespun",
        "auntie annes",
        "GOLDEN DRAGON CHINESE",
        "mochinut",
        "GOGI 92",
        "sweet basil",
        "TOUS LES JOURS",
    ]),
    ("entertainment", [
        "kindle svcs",
        "substack",
        "podcast",
        "itunes",
        "audible",
        "netflix",
        "kqed membership",
        "kqed public media",
        "apple.com",
        "thedispatch",
        "YouTubePremium",
    ]),
    ("gas+tolls", [
        "ezpassva",
        "exxon",
        "highs",
        "shell.*oil",
        "AUTOPIA",
        "bp.*mart",
        "fastlane",
        "gas mart",
        "pioneer.*gas",
        "chevron",
        "exon",
        "PHILLIPS 66",
        "conoco",
        "fastrak",
        "EXXONMOBIL",
        "valero",
        "SOMERSET BP",
        "sheetz",
        "gb10",
        "E Z PASS",
        "CONNECTED SERVICES", # toyota
    ]),
    ("medical", [
        "WINCHESTER MEDICAL",
        "dental",
        "pharmacy",
        "EAST MOUNTAIN HEALTH",
        "LOUDOUN PED ASSC",
        "dermatology",
    ]),
    ("amazon", ["amazon", "AMZN Mktp"]),
    ("other", ["clive coffee"]),
])

sums: Dict[str, int] = defaultdict(lambda: 0)
rows = defaultdict(list)


def iter_csv(filename):
    with open(filename, "r") as csvfile:
        reader = csv.reader(csvfile)
        i = iter(reader)
        header = next(i)
        for row in i:
            record = dict(zip(header, row))
            if record["Type"] == "Payment":
                continue
            date = datetime.strptime(record["Transaction Date"], r"%m/%d/%Y")
            yield (date, record["Description"], record["Amount"])


def fmt_date(date):
    return re.sub(r"T.*", "", date.isoformat())


def iter_ofx(filename):
    from ofxparse import OfxParser

    with open(filename, "rb") as f:
        ofx = OfxParser.parse(f)
    for transaction in ofx.account.statement.transactions:
        if transaction.type != "debit":
            continue
        yield (transaction.date, transaction.payee, transaction.amount)


def iter_file(filename):
    (base, ext) = os.path.splitext(filename.lower())
    if ext in (".ofx", ".qfx"):
        return iter_ofx(filename)
    else:
        return iter_csv(filename)


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument("input")
    parser.add_argument("--month", "-m", type=int)
    args = parser.parse_args()

    for date, description, amount in iter_file(args.input):
        if args.month and date.month != args.month:
            continue
        amount = -float(amount)
        for (catname, res) in list(cats.items()):
            if any(re.search(x, description, re.IGNORECASE) for x in res):
                break
            else:
                catname = "other"

        sums[catname] += amount
        rows[catname].append(f"{fmt_date(date)} {amount:7} {description}")

    for catname in cats.keys():
        print()
        print("%s: " % catname)
        for row in rows[catname]:
            print("\t", row)

    print()

    for catname in cats.keys():
        if sums[catname] > 0:
            print("SUM %s: %.2f" % (catname, sums[catname]))

    print()

    print("TOTAL %.2f" % sum(sums.values()))


if __name__ == "__main__":
    main()
