#!/usr/bin/env python3

import ctypes
import ctypes.util
from macholib import mach_o
from macholib.MachO import MachO, MachOHeader
import argparse
from typing import *


libc = ctypes.cdll[cast(str, ctypes.util.find_library('c'))]

class NXArchInfo(ctypes.Structure):
    _fields_ = [
        ('name', ctypes.c_char_p),
        ('cputype', ctypes.c_int),
        ('cpusubtype', ctypes.c_int),
        ('byteorder', ctypes.c_int),
        ('description', ctypes.c_char_p)]



NXGetArchInfoFromCpuType = libc.NXGetArchInfoFromCpuType
NXGetArchInfoFromCpuType.restype = ctypes.POINTER(NXArchInfo)
NXGetArchInfoFromCpuType.argtypes = [ ctypes.c_int, ctypes.c_int ]

def get_archname(header: MachO):
    h = header.header
    archinfo = NXGetArchInfoFromCpuType(h.cputype, h.cpusubtype)
    if archinfo:
        return archinfo.contents.name.decode('utf8')
    else:
        return f"{hex(h.cputype)}/{hex(h.cpusubtype)}"

parser = argparse.ArgumentParser()
parser.add_argument("filename", metavar="MACHO_FILE")
parser.add_argument('-v', '--verbose', action='store_true')
args = parser.parse_args()

macho = MachO(args.filename)

def get_rpaths(header:MachOHeader) -> Iterable[str]:
    for lc,cmd,data in header.commands:
        if lc.cmd == mach_o.LC_RPATH:
            yield data.rstrip(b'\x00').decode('utf8')

def get_all_rpaths(macho:MachO) -> Iterable[Tuple[MachOHeader,Tuple[str,...]]]:
    for header in macho.headers:
        yield header, tuple(get_rpaths(header))

all_rpaths = dict(get_all_rpaths(macho))

unique_rpaths = set(all_rpaths.values())

if not args.verbose and len(unique_rpaths) == 1:
    for rpath in next(iter(unique_rpaths)):
        print(rpath)
else:
    for header,rpaths in all_rpaths.items():
        print(get_archname(header))
        for rpath in rpaths:
            print("   ", rpath)

