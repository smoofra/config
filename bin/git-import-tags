#!/usr/bin/python

from collections import defaultdict
import subprocess
import sys
import os
import signal
import argparse
import re

FNULL = open(os.devnull, 'w')

class GitFailed(Exception):
    pass

class Git(object):

    def cmd(self, args, **kw):
        proc = subprocess.Popen(args, cwd=self.directory,
                                stdin=FNULL, stdout=subprocess.PIPE, **kw)
        (out, err) = proc.communicate()
        if proc.wait() != 0:
            raise GitFailed, "git failed: " + repr(args)
        return out

    def config_get(self, key):
        args = ['git', 'config', '-z', '--get', key]
        proc = subprocess.Popen(args, cwd=self.directory,
                                stdin=FNULL, stdout=subprocess.PIPE)
        (out, err) = proc.communicate()
        status = proc.wait()
        if status == 1:
            return None
        elif status != 0:
            raise GitFailed, "git failed: " + repr(args)
        else:
            if out.endswith('\x00'):
                return out[:-1]
            else:
                return out

    def config_set(self, key, value):
        self.cmd(['git', 'config', key, value])

    def cmd_test(self, args, **kw):
        proc = subprocess.Popen(args, cwd=self.directory,
                                stdin=FNULL, **kw)
        code = proc.wait()
        if code not in [0,1]:
            raise GitFailed, "git failed"
        return not code

    def __init__(self, directory=None):
        if directory is None:
            directory = '.'
        self.directory = directory
        self.directory = self.cmd("git rev-parse --show-toplevel".split()).strip()
        if self.directory == '':
            raise Exception, "can't find top-level.  (bare repo?)"


    def rev_exists(self, commit):
        try:
            self.cmd(['git', 'rev-parse', commit], stderr=FNULL)
            return True
        except GitFailed:
            return False

    def rev_parse(self, commit):
        return self.cmd(['git', 'rev-parse', commit]).strip()

    def is_clean(self):
        return ('' == self.cmd("git diff --cached --name-only".split()) and
                '' == self.cmd("git diff-files --name-only".split()))

    def has_others(self):
        return '' != self.cmd("git ls-files --others".split())


    def checkout(self, branch):
        self.cmd(['git', 'checkout', branch], stderr=FNULL)


parser = argparse.ArgumentParser()
parser.add_argument("directory", nargs='?')
parser.add_argument("--prefix", '-p')
args = parser.parse_args()

git = Git()

if args.directory is None:
    args.directory = git.config_get('import-tags.directory')

if args.directory is None:
    parser.print_usage()
    print >>sys.stderr, ""
    print >>sys.stderr, "Please specify a directory!"
    sys.exit(1)

if git.cmd('git rev-parse --git-dir'.split()).strip() != '.git':
    raise Exception, "run git-import-tags from the top level"

if not git.is_clean():
    raise Exception, "repo not clean"
if git.has_others():
    raise Exception, "There may not be any untracked files in the working directory"

git.config_set('import-tags.directory', args.directory)

dirs = os.listdir(args.directory)
dirs = [d for d in dirs if os.path.isdir(os.path.join(args.directory, d))]

if args.prefix is not None:
    dirs = [d for d in dirs if d.startswith(prefix)]

def name2tuple(name):
    m = re.match(r'^(.*?)((\d+)(\.\d+)*)$', name)
    if m:
        return (m.group(1),)  + tuple(map(int, m.group(2).split('.')))
    else:
        return (m,)

def tuple2name(tup):
    return tup[0] + '.'.join(map(str, tup[1:]))

dirs = list(sorted(map(name2tuple, dirs)))

def parentof(d):
    # lol n^2
    candidates = [p for p in dirs if p < d and len(p) <= len(d)]
    if candidates:
        candidates.sort()
        return candidates[-1]
    else:
        return None

for d in dirs:

    if git.rev_exists('refs/tags/' + tuple2name(d)):
        continue

    parent = parentof(d)

    print "###"
    print "### importing", tuple2name(d)
    if parent:
        print "###   using parent", tuple2name(parent)
    print "###"

    if git.rev_exists('refs/heads/import'):
        raise Exception, "import branch already exists?"

    if parent is not None:
        parentref = "refs/tags/" + tuple2name(parent)
        assert git.rev_exists(parentref)
        git.cmd("git checkout -b import".split() + [parentref])
    else:
        git.cmd("git checkout --orphan import".split())
        if git.cmd("git ls-files .".split()).strip() != '':
            git.cmd("git rm -rf .".split())

    try:

        tries = 3

        while tries > 0:

            proc = subprocess.Popen(['rsync', '-ra', '--delete', '--exclude', '/.git',
                                     os.path.join(args.directory, tuple2name(d)) + '/', './'],
                                    stdin=FNULL)
            (out, err) = proc.communicate()
            if proc.wait() == 0:
                break
            else:
                tries -= 1
        else:
            raise GitFailed, "rsync failed"

        message = """imported {d}

    imported {d} from {path}""".format(d=tuple2name(d), path=os.path.normpath(os.path.join(args.directory, tuple2name(d))))

        git.cmd("git add .".split())
        git.cmd("git add -u".split())
        git.cmd(["git", "commit", "--allow-empty", "-m", message])
        git.cmd(["git", "tag", tuple2name(d)])

        print repr(git.rev_parse("HEAD"))

    finally:

        git.cmd(["git", "checkout", "-q", git.rev_parse("HEAD")])
        git.cmd("git branch -d import".split())
