#!/usr/bin/python3

import subprocess
import sys
import os
import tempfile
import contextlib
import shutil
import shlex
import argparse

@contextlib.contextmanager
def TemporaryDirectory():
    d = None
    try:
        d = tempfile.mkdtemp()
        yield d
    finally:
        if d is not None:
            shutil.rmtree(d)


FNULL = open(os.devnull, 'r+')

g_verbose = False

class Git(object):

    def cmd(self, args, **kw):
        if g_verbose:
            q = shlex.quote
            print(f"+ cd {q(self.cwd)} &&", ' '.join(map(q, args)))
        proc = subprocess.Popen(args, cwd=self.cwd, env=self.env,
                                encoding='utf8',
                                stderr=subprocess.PIPE,
                                stdin=FNULL, stdout=subprocess.PIPE, **kw)
        (out, err) = proc.communicate()
        if proc.wait() != 0:
            raise Exception("git failed: " + err.strip())
        return out

    def __init__(self, directory=None, env=None):
        if directory is None:
            directory = '.'
        self.cwd = directory

        self.env = dict(os.environ)
        if env is not None:
            self.env.update(env)
        for key, value in list(self.env.items()):
            if value is None:
                del self.env[key]

        self.worktree = self.cmd("git rev-parse --show-toplevel".split()).strip()
        if self.worktree == '':
            self.worktree = None
        if self.worktree is not None and not os.path.isabs(self.worktree):
            raise Exception

        self.git_dir = os.path.abspath(self.cmd("git rev-parse --git-dir".split()).strip())


    def worktrees(self):
        output = self.cmd(['git', 'worktree', 'list', '--porcelain'])
        def trees():
            for worktree in output.rstrip().split("\n\n"):
                def to_pair(line):
                    sp = line.split(None, 1)
                    if len(sp) == 1:
                        return (sp[0], True)
                    else:
                        return sp
                yield dict(to_pair(l) for l in worktree.splitlines())
        return list(trees())


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--cleanup", action="store_true")
    parser.add_argument("--head", action='store_true')
    parser.add_argument("--cherry-pick", "-p", action='store_true')
    parser.add_argument("refs", nargs="*")
    args = parser.parse_args()

    if bool(args.cleanup) + bool(args.refs) != 1:
        parser.error("specify refs or --cleanup")

    original_git = Git()

    for wt_dict in original_git.worktrees():
        if wt_dict.get('branch') == 'refs/heads/testmerge':
            worktree = wt_dict['worktree']
            break
    else:
        worktree = os.path.join(original_git.git_dir, 'testmerge')
        if not args.cleanup:
            original_git.cmd(['git', 'worktree', 'add', worktree, '-b', 'testmerge'])

    if args.cleanup:
        cleanup(original_git, worktree)
        return

    try:
        git = Git(worktree)
        refs = args.refs
        head = original_git.cmd(['git', 'rev-parse', '--short', 'HEAD']).strip()
        refs = [(ref if ref != "HEAD" else head) for ref in refs]

        if args.head:
            git.cmd(['git' "reset", '--hard', 'HEAD'])
        else:
            git.cmd(['git', "reset", '--hard', refs[0]])
            refs = refs[1:]

        if args.cherry_pick:
            git.cmd(['git', 'cherry-pick'] + refs)
        else:
            git.cmd(['git', 'merge'] + refs)

        sha = git.cmd(['git', 'rev-parse', '--short', 'HEAD']).strip()

    finally:
        cleanup(original_git, worktree)

    print(sha)

def cleanup(git, worktree):
    if os.path.exists(worktree):
        shutil.rmtree(worktree)
    git.cmd(['git', 'worktree', 'prune'])
    git.cmd(['git', 'branch', '-D', 'testmerge'])


if __name__ == '__main__':
    main()
