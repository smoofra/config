#!/usr/bin/env python

import sys
import Foundation
import json
import os
import argparse
import cgi
import requests
import keyring

plist_filename = os.path.expanduser('~/Library/Safari/Bookmarks.plist')

parser = argparse.ArgumentParser(description='export safari bookmarks')
parser.add_argument("--owncloud",  action='store_true')
parser.add_argument("--upload",  action='store_true')
args = parser.parse_args()


with open(plist_filename, 'r') as f:
    data = f.read()
    nsdata = Foundation.NSMutableData.dataWithBytes_length_(data, len(data))
    plist, fmt, error = Foundation.NSPropertyListSerialization.propertyListWithData_options_format_error_(
            nsdata, Foundation.NSPropertyListImmutable, None, None)
    if error:
        raise Exception, "error reading plist: " + str(error)

def clean(x):
    if isinstance(x, (dict, Foundation.NSDictionary)):
        return dict(((k,clean(v)) for k,v in x.iteritems() if not k == 'Sync'))
    elif isinstance(x, (list, Foundation.NSArray)):
        return [clean(e) for e in x]
    else:
        return x


def export_plist():

    nsdata, error = Foundation.NSPropertyListSerialization.dataWithPropertyList_format_options_error_(
        clean(plist), Foundation.NSPropertyListXMLFormat_v1_0, 0, None)

    if error:
        raise Exception, "error writing plist: " + str(error)

    sys.stdout.write(bytes(nsdata))


def export_owncloud_iter():

    def visit(node, tags):
        typ   = node['WebBookmarkType']

        if typ == 'WebBookmarkTypeProxy':
            return

        if typ == 'WebBookmarkTypeList':
            title = node['Title']
            if title:
                title_tags = (title),
            else:
                title_tags = ()

            for child in node.get('Children', ()):
                g = visit(child, tags + title_tags)
                for x in g:
                    yield x


            return

        if typ == 'WebBookmarkTypeLeaf':
            url = node['URLString']
            title = node['URIDictionary']['title']

            link = u'<A TAGS="{tags}" HREF="{url}">{title}</A>'.format(tags=cgi.escape(','.join(tags)),
                                                                        url=url,
                                                                        title=cgi.escape(title))

            yield link
            return

        raise Exception

    return visit(plist, ())


def export_owncloud():
    for link in export_owncloud_iter():
        print link.encode('utf-8')


def upload_owncloud():
    data = '\n'.join(x for x in export_owncloud_iter()).encode('utf-8')

    # keyring.set_password('https://odin.elder-gods.org/owncloud', 'lawrence_danna', 'PASSWORD')
    password = keyring.get_password('https://odin.elder-gods.org/owncloud', 'lawrence_danna')

    req = requests.post('https://odin.elder-gods.org/owncloud/index.php/apps/bookmarks/bookmark/import',
                        files={'bm_import': ('bookmarks.html', data, 'text/html')},
                        auth=('lawrence_danna', password))

    print req
    if req.status_code == 200:
        print req.content
    else:
        print req.content[:200]
        sys.exit(1)


if args.owncloud:
    if args.upload:
        upload_owncloud()
    else:
        export_owncloud()
else:
    export_plist()
