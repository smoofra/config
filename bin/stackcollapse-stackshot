#!/usr/bin/python

import sys
import re
from collections import defaultdict

def grab_stack(lines, process_name):

    lines = iter(lines)

    for line in lines:
        if re.match(r'^Process (\d+) .*{name}.* threads:\s*$'.format(name=process_name),
                    line):
            break
    else:
        raise Exception("process not found")

    for line in lines:
        if line.strip()=='' or (not line.startswith('\t') and not line.startswith('thread ')):
            raise Exception("stack not found")
        if line.rstrip() in ('\tuser:', '\tkernel:'):
            break
    else:
        raise Exception("stack not found")

    stack = list()

    for line in lines:

        if line.rstrip() in ('\tuser:', '\tkernel:'):
            continue

        m = re.match(r'\t\t (?P<address>0x[0-9a-f]+) \s+ (?P<function>[^ ]+)?',
                     line, re.IGNORECASE | re.VERBOSE)

        if not m:
            break

        if m.group('function') is not None:
            stack.append(m.group('function'))

    return ';'.join(reversed(stack))


counts = defaultdict(lambda : 0)

for filename in sys.argv[1:]:
    try:
        with open(filename, 'r') as f:
            counts[ grab_stack(f, 'malloc_test') ]  += 1
    except:
        print >>sys.stderr, "while processing: ", filename
        raise


for key, value in counts.items():
    print key, value

# with open(sys.argv[1], "r") as f:
#     stack = grab_stack(f, 'malloc_test', 'kernel')
#     print stack
