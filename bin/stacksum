#!/usr/bin/python

import argparse
import sys
import itertools
import re

parser = argparse.ArgumentParser()
parser.add_argument("pattern", default=None, nargs='?')
parser.add_argument("files", nargs='*')
parser.add_argument("--baseline", "-b", default=None)
parser.add_argument("--ignore-case", "-i", action='store_true')
parser.add_argument("--only-percent", action='store_true')
parser.add_argument("--only-count", action='store_true')
parser.add_argument("-F", "--fixed-strings", action='store_true')
args = parser.parse_args()

if len(args.files) == 0:
    input = sys.stdin
else:
    input = itertools.chain(*[open(f,'r') for f in args.files])

def recompile(x):
    if x is None:
        return re.compile('.')
    if args.fixed_strings:
        x = re.escape(x)
    flags = 0
    if args.ignore_case:
        flags = re.IGNORECASE
    return re.compile(x, flags)

pattern = recompile(args.pattern)
baseline = recompile(args.baseline)

count_pattern = 0
count_baseline = 0

for line in input:
    (stack, count) = re.match('(.*?) \s* (\d+) \s*$', line, re.VERBOSE).groups()
    count = int(count)
    if not baseline.search(stack):
        continue
    count_baseline += count
    if not pattern.search(stack):
        continue
    count_pattern += count

percent = 100 * float(count_pattern)/float(count_baseline)

if args.only_percent:
    print "%5.1f" % percent
elif args.only_count:
    print count_pattern
else:
    print "%s / %d samples.   %.1f%%" % (count_pattern, count_baseline, percent)

