#!/usr/bin/perl -w

use IPC::Run qw/run start finish/;
use Data::Dumper;

use Getopt::Long;
Getopt::Long::Configure ("bundling");
my ($quiet);
GetOptions ("quiet|q" => \$quiet, 
            "chdir|C=s" => sub { chdir $_[1] or die "can't chdir to $_[1]: $!\n"; })
  or die "couldn't get options $!\n";


sub runordie {
  my $message;
  run [@_], '>', \$message, '2>&1'
    or die join(' ', @_) . " failed:\n$message\n";
}

sub parseCommit {
  my $str = shift;
  my $commit = {};
  pos($str) = 0; 
  while ($str =~ /\G ([^\s]+) \s+ (.*) \n/gxc) {
    $commit->{$1} = $2;
  }
  scalar(keys %$commit) or die "malformed commit message (no headers)\n"; 
  $str =~ /\G\n/g or die "malformed commit message (missing newline after headers)\n";
  my $indent = qr/    /;
  my $message = '';
  while ($str =~ /\G $indent (.*\n)/gxc) {
    $message .= $1;
  }
  $commit->{message} = $message;
  $str =~ /\G$/ or die "malformed commit message (trash at the end)\n";
  return $commit;
}

sub readRecord {
  my $fh = shift;
  local $/ = "\0";
  my $_ = <$fh>;
  return undef unless defined $_;
  s/\x00$//;
  return $_;
}

sub revparse {
  my $name = shift;
  my $hash;
  my $message; 
  run [qw/git rev-parse/, $name], '2>', \$message, '>', \$hash
    or die "git rev-parse $name failed:\n$message\n";
  $hash =~ s/\s*$//;
  $hash =~ /^ ([0-9a-fA-F]+)  $/x or die "git rev-parse returned nonsense\n"; 
  return $hash;
}

  

runordie qw/git fetch/;

my $h = start [qw:git log --pretty=raw -z origin/master:], '>pipe', \*LOG, '2>&1'
  or die $!;

my %commits; 
while (defined ($_ = readRecord \*LOG)) {
  my $commit = parseCommit($_);
  $commits{$commit->{commit}} = $commit;
}
finish $h or die $!;


sub lookup {
  my $hash = shift;
  die "couldn't find commit $hash\n" unless defined $commits{$hash};
  return  $commits{$hash};
}

my $master = revparse 'master';
my $originmaster = revparse 'origin/master';

for (my $c = lookup $originmaster; defined $c->{parent}; $c = lookup $c->{parent}) {
  if ($c->{commit} eq $master) {
    if ($quiet) {
      exit 1; 
    } else {
      print "no\n";
      exit 0;
    }
  }
}
print "yes\n" unless $quiet;
exit 0;


