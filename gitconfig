# -*- mode: conf-unix -*-



[core]
        pager = cat

[user]
	name = "Larry D'Anna"
	email = larry@elder-gods.org

[sendemail]
        chainreplyto = false


[alias]
        dc = diff --color
        dw = diff --color-words
        dlog = log --date=relative --pretty=fuller
        tpush = push --dry-run --summary
        s = status
        b = branch -v
        f = ! git remote | xargs -d\\\\n -n1 git fetch -v --summary=200
	wsfix = "!\n. \"$(git --exec-path)\"/git-sh-setup\nf() { \n    if git-diff --quiet --exit-code; then\n        if git diff --cached --check >/dev/null; then\n            exit 0;\n        fi\n        echo fixing\n        git diff --cached > $GIT_DIR/wsfix.diff\n        git apply -R $GIT_DIR/wsfix.diff\n        git apply --whitespace=fix $GIT_DIR/wsfix.diff\n        rm -f $GIT_DIR/wsfix.diff\n    else\n        echo wokring tree is dirty\\!\n    fi\n}\nf"
	wsfix-from = "!\n. \"$(git --exec-path)\"/git-sh-setup\nf() { \n    if git-diff --quiet --exit-code; then\n        if git diff --cached $1 --check >/dev/null; then\n            exit 0;\n        fi\n        echo fixing\n        git diff --cached $1 > $GIT_DIR/wsfix.diff\n        git apply -R $GIT_DIR/wsfix.diff\n        git apply --whitespace=fix $GIT_DIR/wsfix.diff\n        rm -f $GIT_DIR/wsfix.diff\n    else\n        echo wokring tree is dirty\\!\n    fi\n}\nf"
	ec = !\nf() {\n tmp=`tempfile`\n ( git config \"$@\" >$tmp || touch $tmp ) && \n\t$EDITOR $tmp && \n\tgit config \"$@\" \"$(cat $tmp)\" && \n\trm -f $tmp\n}\nf
	egc = ! git ec --file ~/.gitconfig
        lsf = ls-files --exclude-standard --directory
        one = log --oneline --left-right

	dh = "!f() {  \n    if [ $# -ne 2 ]; then\n        echo \"usage: git dh <ref1> <ref2>\"; \n        exit 1;\n    fi\n    set -e \n    a=$(git-rev-parse --revs-only $1)\n    b=$(git-rev-parse --revs-only $2)\n\n    if [ \"\" = \"$a\" ]; then\n       echo \"huh?\"\n       exit 1;\n    fi     \n\n\n    if [ \"\" = \"$b\" ]; then\n       echo \"huh?\"\n       exit 1;\n    fi     \n\n    if [ \"$a\" = \"$b\" ]; then\n       echo \"same commit\"\n    else       \n        git one \"$1...$2\"; \n        echo \n        if ! git diff --quiet $1 $2; then\n            echo \"trees differ\"\n        else\n            echo \"trees are the same\"\n        fi\n    fi\n} \nf"

	drl = "!f() {  \n    #echo \"usage: git drl <ref> [<n>]\"; \n    set -e\n    if [ $# -lt 1 ]; then\n        x=`git rev-parse --symbolic-full-name HEAD`\n    else \n        x=$1; \n        shift; \n    fi\n    n=1\n    if [ $# -gt 0 ]; then\n       n=$1\n       shift\n    fi\n    git reflog show $x | head -$(expr $n + 1)\n    echo\n    git dh $x@{$n} $x\n} \nf"


        detach = ! git checkout `git-rev-parse HEAD`
	dfetch = "!\nf() { \n\tif head=`git rev-parse --symbolic-full-name HEAD` ; then\n\t\tif echo \"$head\" | grep -q '^refs/heads/'; then\n\t\t\thead=`perl -e '$_ = shift; s:^refs/heads/::; print' \"$head\" ` \t\t\n\t\t\techo === detaching\n\t\t\tgit checkout `git-rev-parse HEAD` \n\t\telse\n\t\t\thead=\"\"\n\t\tfi; \n\t\techo === fetching\t\n\t\tgit fetch \"$@\"\n\t\tif [ ! -z \"$head\" ]; then\n\t\t\techo === checking out\n\t\t\tgit checkout \"$head\";\n\t\tfi\n\tfi;\n}\nf"
	mpush = "!\nf() { \n    if [ $# -lt 2 ] ; then \n        echo \"usage: git mpush <remote> <reftree> [ <push options> ]\"\n        exit 1; \n    fi\n    set -e \n    remote=\"$1\"\n    reftree=\"$2\"\n    shift\n    shift\n    temp=`tempfile`\n    git ls-remote . \"$reftree\" | cut -f2  >$temp\n    dels=$( git ls-remote \"$remote\" \"$reftree\" | cut -f2 | grep -v -F --file=$temp | sed 's/^/:/')\n    rm $temp    \n    git push -f \"$remote\" \"$reftree\" $dels \"$@\"\n}\nf "
	tg-stale = "!\nf() {\n    git for-each-ref refs/top-bases | cut -f 2 | \\\n        xargs -d\\\\n -n1 perl -e '$_=shift; $o=$_; s:^refs/top-bases:refs/heads:; print \"$o\\n\" if \"\" eq `git for-each-ref $_`'\n}\nf"
	delrefs = "!\nf() {\n    if [ $# -lt 1 ] ; then \n        echo \"usage: git delrefs <reftree>\"\n        exit 1; \n    fi\n    set -e\n    while [ $# -gt 0 ]; do\n          git ls-remote . $1 | cut -f2 | xargs -d\\\\n -n1 git update-ref -d \n          shift;\n    done\n}\nf"



[push]
        default = matching









