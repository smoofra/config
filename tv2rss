#!/usr/bin/perl -w

use XMLTV;
use XMLTV::Date;
use Date::Manip;
use XML::RSS;
use Getopt::Long;

sub htmlencode {
  my $x = shift;
  my %tran = ('>' => '&gt;',
              '<' => '&lt;',
              '&' => '&amp;');
  $x =~ s/([\<\>\&])/ $tran{$1} /ge;
  return $x;
}

Getopt::Long::Configure ("bundling");

my $tomorrow = 0;
my $rsstitle = 'XML TV';
GetOptions ( "tomorrow|T" => \$tomorrow,
             "title|t=s" => \$rsstitle) or die "couln't get options $!";

my $rss = new XML::RSS (version => '1.0');
$rss->channel(title => $rsstitle);

@ARGV = '/dev/fd/0' unless (@ARGV);

sub mypd {
  my $x = shift;
  $x =~ s/\s+.*$//;
  return parse_date $x;
}

sub daysSince1BC {
  my $time = shift;
  return Date::Manip::Date_DaysSince1BC(UnixDate($time,"%m"), UnixDate($time,"%d"), UnixDate($time,"%Y"));
}

sub process {
  my $data = XMLTV::parsefile(shift);
  my ($encoding, $credits, $ch, $progs) = @$data;  

  foreach $prog (@$progs) {
    my $chanid = $prog->{channel};
    my $chan = $ch->{$chanid};
    my ($channame) = @{XMLTV::best_name(['en'], $chan->{'display-name'})};
    my $time = XMLTV::Date::parse_date $prog->{start};
    $time = Date_ConvTZ($time,"","EDT");

    next if $tomorrow and (daysSince1BC($time) - daysSince1BC(Date::Manip::ParseDate("today"))) > 1; 

    my $timestr = UnixDate($time, "%a %b %e %r");
    my ($title) = @{XMLTV::best_name (['en'], $prog->{title})};
    my ($desc) = defined $prog->{desc} ? @{XMLTV::best_name (['en'], $prog->{desc})}
      : undef;
    my ($subtitle) = defined $prog->{'sub-title'} ? @{XMLTV::best_name (['en'], $prog->{'sub-title'})}
      : undef;

    $description = '';
    $description .= sprintf "<h4>%s</h4>\n", htmlencode($subtitle) if defined $subtitle;
    $description .= sprintf "<p>%s</p>\n",   htmlencode($desc)     if defined $desc;
    $description .= sprintf "<p>On %s.</p>\n",   htmlencode($channame); 
  
    $rss->add_item(link => '',
                   title => "[$rsstitle] $title @ $timestr", 
                   description => $description
                  ); 
  }
}

process $_ for @ARGV;

print $rss->as_string;

exit 0; 



