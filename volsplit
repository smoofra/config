#!/usr/bin/perl -w 

use File::Spec::Functions;
use Getopt::Long;
use Data::Dumper;
use IPC::Run qw/run/; 

Getopt::Long::Configure ("bundling");

my $max = '600m';
my $outdir;
my $pathspec;
my @exclude;
my $prefix; 
my $volid;
my $script;
my $device; 

GetOptions ("exclude-regexp|X=s" => sub { my ($cb, $arg) = @_;
                                        push @exclude, qr/$arg/; },
            "exclude|x=s" => sub { my ($cb, $arg) = @_;
                                   push @exclude, quotemeta($arg) },
            "prefix|P=s" => \$prefix,
            "volid|V=s" => \$volid,
            "device|Z=s" => \$device, 
            "script|S" => \$script, 
            "pathspec|p" => \$pathspec,
            "outdir|o=s" => \$outdir,
            "volume-size|s=s" => \$max);


if (defined $prefix) { 
  $prefix =~ s:/*$:/:;
} else {
  $prefix = '/';
}

my @outdir;
push @outdir, $outdir if defined $outdir; 


if ($max =~ /^ (\d+(\.\d+)?) m $/xi) {
  $max = int($1 * 1024);
}
if ($max =~ /^ (\d+(\.\d+)?) g $/xi) {
  $max = int($1 * 1024 * 1024);
}
if ($max =~ /^ (\d+) k $/xi) {
  $max = $1;
}
unless ($max =~ /^ (\d+) $/xi) {
  die "i don't understand the size $max\n";
}

die "i need a target directory\n" unless @ARGV;
my $toptarget = shift;
die "wtf\n" if @ARGV;

die "$toptarget not a directory\n" unless -d $toptarget;




our $cursize;
our $curvolfh;
our $curvolindex = 0;

sub closevol {
  if (defined $curvolfh) { 
    if ($script) { 
      print $curvolfh "END\n";
    }
    close $curvolfh;
    undef $curvolfh;
  }
}

sub newvol {
  $curvolindex++;
  closevol; 
  my $of = catfile(@outdir, "vol_$curvolindex");
  open $curvolfh, ">",  $of or die "couldn't open $of : $!\n";
  if ($script) {
    my $volidarg = defined($volid) ? "-V $volid" : '';
    my $devarg = defined($device) ? "-Z $device" : '-Z $1';
    print $curvolfh "growisofs $devarg -f $volidarg -J -R  -v -graft-points -path-list - <<END\n"
  }    
  $cursize = 0; 
}

sub take {
  my ($target, $path, $size) = @_;
  die "paths can't have newlines" if $target =~ /\n/; 
  if ($pathspec) {
    die "paths can't have newlines" if $path =~ /\n/; 
    die "paths can't have equal signs\n" if $target =~ /=/;
    die "paths can't have equal signs\n" if $path =~ /=/;
    print $curvolfh "${prefix}$target=$path\n";
  } else { 
    print $curvolfh $target, "\n";
  }
  $cursize += $size;  
}

sub traverse {
  my @target = @_ ;
  my $targetpath = catfile($toptarget, @target); 
  opendir my $dh, $targetpath or die "can't opendir $targetpath: $!\n";
 TF:
  for my $thing (readdir $dh) {
    next if $thing eq '.';
    next if $thing eq '..';
    my $duout;
    $thing = catfile(@target,$thing);
    for (@exclude) {
      next TF if $thing =~ /$_/;
    }
    $thingpath = catfile($toptarget, $thing);
    -f $thingpath or -d $thingpath or die "wtf is $thingpath\n";
    run [qw/du -sk /, $thingpath], '>', \$duout or die "du returned $?\n";
    $duout =~ /^ \s* (\d+) \s /x or die "bad du output: $duout\n";
    my $thingsize = $1;
    if ($thingsize + $cursize < $max) {
      take $thing, $thingpath, $thingsize;
    } elsif (-f $thingpath) {
      die "$thingpath is too big\n" if ($thingsize > $max);
      newvol;
      take $thing, $thingpath, $thingsize;
    } else {
      &traverse ($thing);
    }
  }
  close $dh;
}

newvol;
traverse; 
closevol; 

