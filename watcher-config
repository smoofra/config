# -*- mode: cperl; -*- 

use HTML::TreeBuilder;
use HTML::Element;
use HTML::Tree;
use Digest::MD5; 

sub strip_ob_sidebar {
  my $data = shift;
  my $html = HTML::TreeBuilder->new;
  $html->utf8_mode(1);
  $html->parse($data);
  my @bad; 
  $html->traverse ([
                    sub {
                      my $x = shift;
                      if (ref $x eq 'HTML::Element' and
                          $x->tag eq 'div' and
                          defined $x->attr('class')) {
                        my $class = $x->attr ('class');
                        if ($class =~ /module-archives/ or
                            $class =~ /module-widget/ or
                            $class =~ /module-typelist/ or
                            $class =~ /module-syndicate/ or
                            $class =~ /module-calendar/ or
                            $class =~ /module-category-cloud/ or
                            $class =~ /module-recent-comments/) {
                          push @bad, $x;
                          return HTML::Element::PRUNE;
                        }
                      }
                      return HTML::Element::OK;                      
                    }
                   ]);
  for (@bad) {
    $_->detach; 
  }
  return $html->as_HTML('<>&', "\t");
}

sub obhook {
  my $item = shift;
  if (defined $item->{content}) {
    $item->{content} = strip_ob_sidebar $item->{content};
    return $item;
  }
}

sub hsrwikihook {
  my $item = shift;
  $item->{url} = 'http://www.hrwiki.org/index.php?title=H*R.com_updates_2009';
  return $item unless defined $item->{content};
  my $html = HTML::TreeBuilder->new;
  $html->utf8_mode(1);
  $html->parse(join '', $item->{content});
  my $content =  'WTF'; 
  $html->traverse ([
                    sub {
                      my $x = shift;
                      if (ref $x eq 'HTML::Element' and
                          $x->tag eq 'textarea') {
                        $content = join '', $x->content_list();
                      }
                      return HTML::Element::OK;
                    }]);
  $item->{content} = $content;
  return $item;
}


{
  link => "http://elder-gods.org/~larry/watcher.cgi",
  pages => [
            { name => 'test',
              url => "http://elder-gods.org/test.html"},
            { name => 'maddox',
              url => 'http://maddox.xmission.com/',
              posthook => sub {
                my $item = shift;
                if (defined $item->{content}) {
                  my $re = qr/people think I'm right about everything/; 
                  $item->{content} =~ s/[^\n]*$re.*//s;
                }
                return $item; 
              }
            },
            { name => 'theory of everything comics',
              url => 'http://www.theoryofeverythingcomics.com/',
            },
            { name => 'gothsicles news',
              url => 'http://www.thegothsicles.com/news.html',
            },
            {
             name => 'the pain',
             url => 'http://thepaincomics.com/new_index.htm'
            },
            {
             url => 'http://www.hrwiki.org/index.php?title=H*R.com_updates_2009&action=edit',
             name => 'H*R wiki updates page, 2009',
             posthook => \&hsrwikihook,
            },
#             {
#              url => 'http://homestarrunner.com/main1.swf',
#              name => 'Homestar Runner',
#              posthook => sub {
#                my $item = shift;
#                my $md5 = Digest::MD5->new;
#                if (defined $item->{content}) {
#                  $md5->add($item->{content});
#                  $item->{content} = "MD5:" . $md5->hexdigest();
#                }
#                $item->{url} = 'http://homestarrunner.com/main1.html'; 
#                return $item;
#              }
#             },
            {
             url => 'http://penny-arcade.com/presents/',
             name => 'Penny Arcade Presents',
            },

           ],
}
